@model Proyecto1_MZ_MJ.Models.Producto
@{
    ViewData["Title"] = "Realidad Aumentada - " + Model.Nombre;
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>AR - @Model.Nombre</title>

    <!-- Incluimos Three.js para el renderizado 3D -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>

    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #000;
            font-family: Arial, sans-serif;
        }

        #video-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        #ar-canvas {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            pointer-events: none;
        }

        #video {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .ui-layer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 3;
            pointer-events: none;
        }

        .back-button {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 4;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
            pointer-events: auto;
        }

        .product-info {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 4;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 10px;
            border-radius: 10px;
            max-width: 300px;
        }

        .product-name {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .product-price {
            font-size: 16px;
        }

        .instructions {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            z-index: 5;
            width: 80%;
            max-width: 300px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            .instructions button {
                background-color: #ff4081;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 20px;
                margin-top: 15px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                pointer-events: auto;
            }

        .device-message {
            position: fixed;
            top: 70px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 12px;
            z-index: 4;
        }
    </style>
</head>
<body>
    <!-- Contenedor de video (cámara) -->
    <div id="video-container">
        <video id="video" autoplay playsinline></video>
    </div>

    <!-- Canvas para renderizar el cubo 3D -->
    <canvas id="ar-canvas"></canvas>

    <!-- Capa de UI -->
    <div class="ui-layer">
        <button class="back-button" onclick="window.location.href='/Productos/Detalle/@Model.Id'">
            ←
        </button>

        <div class="product-info">
            <div class="product-name">@Model.Nombre</div>
            <div class="product-price">$@Model.Precio</div>
        </div>

        <div class="device-message" id="device-message"></div>
    </div>

    <!-- Instrucciones iniciales -->
    <div class="instructions" id="instructions">
        <h3>Experiencia 3D</h3>
        <p id="instruction-text">Cargando...</p>
        <button id="start-button">Iniciar</button>
    </div>

    <script>
        let camera, scene, renderer;
        let cube;
        let videoElement;
        let isMobile = false;

        document.addEventListener('DOMContentLoaded', function() {
            const startButton = document.getElementById('start-button');
            const instructions = document.getElementById('instructions');
            const instructionText = document.getElementById('instruction-text');
            const deviceMessage = document.getElementById('device-message');

            // Detectar tipo de dispositivo
            isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            const isAndroid = /Android/i.test(navigator.userAgent);

            if (isMobile) {
                if (isAndroid) {
                    instructionText.textContent = "Esta experiencia usará la cámara de tu dispositivo para mostrar un cubo rojo 3D.";
                    deviceMessage.textContent = "Modo Android AR";
                } else {
                    instructionText.textContent = "Esta experiencia muestra un cubo rojo 3D con la cámara de tu dispositivo móvil.";
                    deviceMessage.textContent = "Modo móvil";
                }
            } else {
                instructionText.textContent = "Esta experiencia muestra un cubo rojo 3D en un entorno virtual.";
                deviceMessage.textContent = "Modo escritorio";
            }

            startButton.addEventListener('click', function() {
                // Ocultar instrucciones
                instructions.style.display = 'none';

                // Iniciar experiencia AR o 3D según el dispositivo
                if (isMobile) {
                    initAR();
                } else {
                    initDesktop3D();
                }
            });
        });

        async function initAR() {
            // Configurar video (cámara) para dispositivos móviles
            try {
                await setupCamera();

                // Inicializar escena 3D
                initThreeJS();

                // Animar escena
                animate();
            } catch (error) {
                console.error('Error inicializando AR:', error);
                alert('Error al acceder a la cámara: ' + error.message);

                // Fallback a modo escritorio si falla la cámara
                initDesktop3D();
            }
        }

        function initDesktop3D() {
            // Ocultar contenedor de video para escritorio
            document.getElementById('video-container').style.display = 'none';

            // Inicializar escena 3D con entorno
            initThreeJS(true);

            // Animar escena
            animate();
        }

        async function setupCamera() {
            videoElement = document.getElementById('video');

            // Solicitar acceso a la cámara trasera
            const stream = await navigator.mediaDevices.getUserMedia({
                audio: false,
                video: {
                    facingMode: 'environment', // Usar cámara trasera
                    width: { ideal: window.innerWidth },
                    height: { ideal: window.innerHeight }
                }
            });

            videoElement.srcObject = stream;

            // Esperar a que el video esté listo
            return new Promise((resolve) => {
                videoElement.onloadedmetadata = () => {
                    videoElement.play();
                    resolve();
                };
            });
        }

        function initThreeJS(isDesktop = false) {
            // Configurar escena
            scene = new THREE.Scene();

            // Para escritorio, agregar fondo y luces
            if (isDesktop) {
                // Color de fondo para la escena
                scene.background = new THREE.Color(0x87CEEB); // Azul cielo

                // Añadir luces
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
                scene.add(ambientLight);

                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
                directionalLight.position.set(5, 10, 7.5);
                scene.add(directionalLight);

                // Añadir un "suelo"
                const planeGeometry = new THREE.PlaneGeometry(20, 20);
                const planeMaterial = new THREE.MeshStandardMaterial({
                    color: 0x8BC34A,  // Verde
                    side: THREE.DoubleSide
                });
                const plane = new THREE.Mesh(planeGeometry, planeMaterial);
                plane.rotation.x = -Math.PI / 2; // Rotar para que sea horizontal
                plane.position.y = -1; // Colocar debajo del cubo
                scene.add(plane);
            }

            // Configurar cámara
            const width = window.innerWidth;
            const height = window.innerHeight;
            const fieldOfView = 75;
            const aspectRatio = width / height;
            const nearPlane = 0.1;
            const farPlane = 1000;

            camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);
            camera.position.z = 5;

            // Para escritorio, ajustar la posición de la cámara
            if (isDesktop) {
                camera.position.set(3, 3, 5);
                camera.lookAt(0, 0, 0);
            }

            // Configurar renderer
            renderer = new THREE.WebGLRenderer({
                canvas: document.getElementById('ar-canvas'),
                alpha: !isDesktop // Fondo transparente solo para móvil
            });
            renderer.setSize(width, height);

            // Crear cubo rojo
            const geometry = new THREE.BoxGeometry(1, 1, 1);
            const material = new THREE.MeshStandardMaterial({
                color: 0xff0000,
                metalness: 0.3,
                roughness: 0.4
            });
            cube = new THREE.Mesh(geometry, material);

            // Posicionar el cubo
            if (isDesktop) {
                cube.position.set(0, 0, 0);
            } else {
                cube.position.set(0, 0, -3); // Frente a la cámara para móvil
            }

            // Añadir cubo a la escena
            scene.add(cube);

            // Manejar redimensionamiento de la ventana
            window.addEventListener('resize', onWindowResize, false);
        }

        function onWindowResize() {
            const width = window.innerWidth;
            const height = window.innerHeight;

            camera.aspect = width / height;
            camera.updateProjectionMatrix();
            renderer.setSize(width, height);
        }

        function animate() {
            requestAnimationFrame(animate);

            // Rotar el cubo
            cube.rotation.x += 0.01;
            cube.rotation.y += 0.01;

            // Renderizar escena
            renderer.render(scene, camera);
        }
    </script>
</body>
</html>