@model Proyecto1_MZ_MJ.Models.Producto
@{
    ViewData["Title"] = "Realidad Aumentada - " + Model.Nombre;
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>AR - @Model.Nombre</title>

    <!-- Incluimos Three.js y WebXR Polyfill -->
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://unpkg.com/webxr-polyfill@latest/build/webxr-polyfill.js"></script>

    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #000;
            font-family: Arial, sans-serif;
        }

        #scene-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        .ui-layer {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 3;
            pointer-events: none;
        }

        .back-button {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 4;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
            pointer-events: auto;
        }

        .product-info {
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 4;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 10px;
            border-radius: 10px;
            max-width: 300px;
        }

        .product-name {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .product-price {
            font-size: 16px;
        }

        .instructions {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            z-index: 5;
            width: 80%;
            max-width: 400px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            .instructions button {
                background-color: #ff4081;
                color: white;
                border: none;
                border-radius: 5px;
                padding: 10px 20px;
                margin-top: 15px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                pointer-events: auto;
            }

        .device-message {
            position: fixed;
            top: 70px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 12px;
            z-index: 4;
        }

        .ar-button {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #ff4081;
            color: white;
            border: none;
            border-radius: 25px;
            padding: 15px 30px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            z-index: 1000;
            pointer-events: auto;
            display: none;
        }

        .ar-instructions {
            position: fixed;
            top: 120px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px 20px;
            border-radius: 10px;
            text-align: center;
            font-size: 14px;
            z-index: 4;
            display: none;
        }

        .reticle {
            display: none;
        }
    </style>
</head>
<body>
    <!-- Contenedor de la escena -->
    <div id="scene-container"></div>

    <!-- Capa de UI -->
    <div class="ui-layer">
        <button class="back-button" onclick="window.location.href='/Productos/Detalle/@Model.Id'">
            ←
        </button>

        <div class="product-info">
            <div class="product-name">@Model.Nombre</div>
            <div class="product-price">$@Model.Precio</div>
        </div>

        <div class="device-message" id="device-message"></div>
        <div class="ar-instructions" id="ar-instructions">
            Mueve el dispositivo para detectar superficies. Toca la pantalla para colocar el cubo.
        </div>
    </div>

    <!-- Instrucciones iniciales -->
    <div class="instructions" id="instructions">
        <h3>Experiencia 3D</h3>
        <p id="instruction-text">Cargando...</p>
        <button id="start-button">Iniciar</button>
    </div>

    <!-- Botón AR para dispositivos móviles -->
    <button class="ar-button" id="ar-button">Iniciar AR</button>

    <script>
        let camera, scene, renderer;
        let cube;
        let reticle;
        let hitTestSource = null;
        let hitTestSourceRequested = false;
        let isMobile = false;
        let isWebXRSupported = false;
        let arSession = null;
        let cubeIsPlaced = false;

        document.addEventListener('DOMContentLoaded', function() {
            const startButton = document.getElementById('start-button');
            const instructions = document.getElementById('instructions');
            const instructionText = document.getElementById('instruction-text');
            const deviceMessage = document.getElementById('device-message');
            const arButton = document.getElementById('ar-button');

            // Detectar tipo de dispositivo
            isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            const isAndroid = /Android/i.test(navigator.userAgent);

            // Verificar soporte para WebXR
            if ('xr' in navigator) {
                navigator.xr.isSessionSupported('immersive-ar').then((supported) => {
                    isWebXRSupported = supported;

                    if (isMobile && supported) {
                        instructionText.textContent = "Esta experiencia usa AR con detección de superficies.";
                        deviceMessage.textContent = "WebXR AR disponible";
                    } else if (isMobile && !supported) {
                        instructionText.textContent = "AR no soportado. Mostrando experiencia 3D simple.";
                        deviceMessage.textContent = "AR no disponible";
                    } else {
                        instructionText.textContent = "Esta experiencia muestra un cubo rojo 3D en un entorno virtual.";
                        deviceMessage.textContent = "Modo escritorio";
                    }
                });
            } else {
                if (isMobile) {
                    instructionText.textContent = "WebXR no soportado. Mostrando experiencia 3D simple.";
                    deviceMessage.textContent = "WebXR no disponible";
                } else {
                    instructionText.textContent = "Esta experiencia muestra un cubo rojo 3D en un entorno virtual.";
                    deviceMessage.textContent = "Modo escritorio";
                }
            }

            startButton.addEventListener('click', function() {
                // Ocultar instrucciones
                instructions.style.display = 'none';

                // Iniciar experiencia según el dispositivo
                if (isMobile && isWebXRSupported) {
                    initMobileAR();
                } else if (isMobile) {
                    initSimpleMobile();
                } else {
                    initDesktop3D();
                }
            });

            arButton.addEventListener('click', async function() {
                if (arSession) {
                    arSession.end();
                } else {
                    startAR();
                }
            });
        });

        function initMobileAR() {
            // Mostrar botón AR y instrucciones
            document.getElementById('ar-button').style.display = 'block';
            document.getElementById('ar-instructions').style.display = 'block';

            // Inicializar escena Three.js
            initThreeJS(false, true);

            // Crear el reticle (indicador de superficie)
            createReticle();

            // Animar escena
            animate();
        }

        function initSimpleMobile() {
            // Versión simple para móviles sin WebXR
            initThreeJS(false, false);
            animate();
        }

        function initDesktop3D() {
            // Versión escritorio
            initThreeJS(true, false);
            animate();
        }

        function initThreeJS(isDesktop = false, isAR = false) {
            // Configurar escena
            scene = new THREE.Scene();

            // Para escritorio, agregar fondo y luces
            if (isDesktop) {
                scene.background = new THREE.Color(0x87CEEB);

                const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
                scene.add(ambientLight);

                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
                directionalLight.position.set(5, 10, 7.5);
                scene.add(directionalLight);

                // Añadir suelo
                const planeGeometry = new THREE.PlaneGeometry(20, 20);
                const planeMaterial = new THREE.MeshStandardMaterial({
                    color: 0x8BC34A,
                    side: THREE.DoubleSide
                });
                const plane = new THREE.Mesh(planeGeometry, planeMaterial);
                plane.rotation.x = -Math.PI / 2;
                plane.position.y = -1;
                scene.add(plane);
            } else if (!isAR) {
                // Para móvil simple, añadir luz
                const ambientLight = new THREE.AmbientLight(0xffffff, 1.0);
                scene.add(ambientLight);
            }

            // Configurar cámara
            const width = window.innerWidth;
            const height = window.innerHeight;
            camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);

            if (isDesktop) {
                camera.position.set(3, 3, 5);
                camera.lookAt(0, 0, 0);
            } else {
                camera.position.z = 5;
            }

            // Configurar renderer
            renderer = new THREE.WebGLRenderer({
                antialias: true,
                alpha: !isDesktop,
                xr: { enabled: isAR }
            });
            renderer.setSize(width, height);
            renderer.setPixelRatio(window.devicePixelRatio);

            if (isAR) {
                renderer.xr.enabled = true;
            }

            document.getElementById('scene-container').appendChild(renderer.domElement);

            // Crear cubo
            if (!isAR || isDesktop) {
                createCube(isDesktop);
            }

            // Manejar redimensionamiento
            window.addEventListener('resize', onWindowResize, false);
        }

        function createCube(isDesktop = false) {
            const geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);
            let material;

            if (isDesktop) {
                material = new THREE.MeshStandardMaterial({
                    color: 0xff0000,
                    metalness: 0.3,
                    roughness: 0.4
                });
            } else {
                material = new THREE.MeshBasicMaterial({
                    color: 0xff0000,
                    side: THREE.DoubleSide
                });
            }

            cube = new THREE.Mesh(geometry, material);

            if (isDesktop) {
                cube.position.set(0, 0, 0);
                scene.add(cube);
            } else if (!isWebXRSupported) {
                cube.position.set(0, 0, -3);
                scene.add(cube);
            }
        }

        function createReticle() {
            // Crear indicador de superficie
            const geometry = new THREE.RingGeometry(0.15, 0.2, 32);
            const material = new THREE.MeshBasicMaterial({
                color: 0xffffff,
                side: THREE.DoubleSide
            });
            reticle = new THREE.Mesh(geometry, material);
            reticle.rotation.x = -Math.PI / 2;
            reticle.visible = false;
            scene.add(reticle);
        }

        async function startAR() {
            // Configurar sesión AR
            const sessionInit = {
                requiredFeatures: ['hit-test'],
                optionalFeatures: ['dom-overlay'],
                domOverlay: { root: document.body }
            };

            arSession = await navigator.xr.requestSession('immersive-ar', sessionInit);
            renderer.xr.setReferenceSpaceType('local');
            renderer.xr.setSession(arSession);

            document.getElementById('ar-button').textContent = 'Salir de AR';

            // Manejar evento select (toque de pantalla)
            arSession.addEventListener('select', onSelect);

            arSession.addEventListener('end', () => {
                arSession = null;
                hitTestSource = null;
                hitTestSourceRequested = false;
                document.getElementById('ar-button').textContent = 'Iniciar AR';
                if (reticle) reticle.visible = false;
                if (cube && !cubeIsPlaced) scene.remove(cube);
            });
        }

        function onSelect() {
            if (reticle.visible && !cubeIsPlaced) {
                // Crear y colocar el cubo en la posición del reticle
                if (!cube) {
                    createCube(false);
                }

                cube.position.copy(reticle.position);
                cube.position.y += 0.25; // Elevar el cubo un poco sobre la superficie
                scene.add(cube);
                cubeIsPlaced = true;

                // Ocultar reticle después de colocar el cubo
                reticle.visible = false;
                document.getElementById('ar-instructions').style.display = 'none';
            }
        }

        function onWindowResize() {
            const width = window.innerWidth;
            const height = window.innerHeight;

            camera.aspect = width / height;
            camera.updateProjectionMatrix();
            renderer.setSize(width, height);
        }

        function animate() {
            renderer.setAnimationLoop(render);
        }

        function render(timestamp, frame) {
            // Si estamos en AR, manejar hit test
            if (frame && renderer.xr.isPresenting) {
                const referenceSpace = renderer.xr.getReferenceSpace();
                const session = renderer.xr.getSession();

                if (hitTestSourceRequested === false) {
                    session.requestReferenceSpace('viewer').then((viewerSpace) => {
                        session.requestHitTestSource({ space: viewerSpace }).then((source) => {
                            hitTestSource = source;
                        });
                    });

                    hitTestSourceRequested = true;
                }

                if (hitTestSource) {
                    const hitTestResults = frame.getHitTestResults(hitTestSource);

                    if (hitTestResults.length > 0 && !cubeIsPlaced) {
                        const hit = hitTestResults[0];
                        const pose = hit.getPose(referenceSpace);

                        if (pose) {
                            reticle.visible = true;
                            reticle.position.setFromMatrixPosition(new THREE.Matrix4().fromArray(pose.transform.matrix));
                        }
                    }
                }
            }

            // Rotar el cubo si existe
            if (cube && scene.children.includes(cube)) {
                cube.rotation.x += 0.01;
                cube.rotation.y += 0.01;
            }

            renderer.render(scene, camera);
        }
    </script>
</body>
</html>